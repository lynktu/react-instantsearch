extends archetypes/single-column.pug

block content
  section.row.fill-white.p-xlarge.m-l-none.m-r-none.section-best-practices.m-t-n-large
    .container.m-t-n-large
      .col-md-12.z-10.text-center.pos-rel.screen-mockup.m-t-n-large
        .spacer120.visible-lg.visible-md.visible-sm
        .spacer32
        img.m-t-n-large.img-responsive.pos-rel.m-l-r-auto(src="https://community.algolia.com/react-instantsearch/images/Mockup-533a67b537bda2d4514c5eef95315855.png", width="620", alt="Demo vue-instantsearch")
        .spacer32

  section.row.fill-white.p-xlarge.m-l-none.m-r-none.pos-rel
    .container
      .col-md-6.hidden-sm
        img.section-illustration(src="assets/img/instantsearch-components.svg", alt="InstantSearch components", width="525", height="254.67")
      .col-md-6.p-l-xlarge
        header
          h3.no-p-t.m-t-none Built with design in mind
        .spacer16.visible-sm
        img.section-illustration.visible-sm(src="assets/img/instantsearch-components.svg", alt="InstantSearch components", width="525", height="254.67")
        .spacer24
        p.color-logan.text-regular.text-normal Our search widgets feature slick design by default and benefit from our experience building thousands of search interfaces.

        .spacer24
        a.btn.btn-static-theme.b-n.elevation0(href="widgets.html", title="instantSearch.js widgets").
          Discover widgets
          <svg> <use xlink:href="#arrow-right"></svg>

    .inline.spacer80
    .inline.spacer120

  section.row.fill-titan.p-xlarge.m-l-none.m-r-none.pos-rel.section-infinite-possibilities
    .container
      .inline.spacer40.hidden-sm
      .col-md-12.z-10
        .col-md-6.p-r-xlarge
          header
            h3.no-p-t.m-t-none.text-thin Intuitive API
          .spacer16.visible-sm
          img.section-illustration.visible-sm(src="assets/img/infinite-components.svg", alt="Illustration infinite-possibilities", width="525")
          .spacer24
          p.color-logan.text-regular.text-normal We crunched feedback from hundreds of users of instantsearch.js into building React InstantSearch API.
          .spacer24
          a.btn.btn-static-theme.b-n.elevation0(href="examples/bootstrap.html", title="instantSearch.js examples").
            Read the guide
            <svg><use xlink:href="#arrow-right"></svg>

        .col-md-6.hidden-sm.
            <pre class="al-snippet p-large" data-snippet-theme="dark"><code><span class="sn-keyword">const</span> SearchBox <span class="sn-keyword">=</span> connectSearchBox(
              ({query, refine}) <span class="sn-keyword">=&gt;</span>
                <span class="sn-keyword">&lt;</span>div className<span class="sn-keyword">=</span><span class="sn-string">"searchbox-container"</span><span class="sn-keyword">&gt;</span>
                  <span class="sn-keyword">&lt;</span>div className<span class="sn-keyword">=</span><span class="sn-string">"input-group"</span><span class="sn-keyword">&gt;</span>
                    <span class="sn-keyword">&lt;</span>input type<span class="sn-keyword">=</span><span class="sn-string">"text"</span>
                           <span class="sn-variable">value</span><span class="sn-keyword">=</span>{query}
                           <span class="sn-variable">onChange</span><span class="sn-keyword">=</span>{e <span class="sn-keyword">=&gt;</span> refine(e.<span class="sn-variable">target</span>.<span class="sn-variable">value</span>)}
                           className<span class="sn-keyword">=</span><span class="sn-string">"form-control"</span>/<span class="sn-keyword">&gt;</span>

                    <span class="sn-keyword">&lt;</span>span className<span class="sn-keyword">=</span><span class="sn-string">"input-group-btn"</span><span class="sn-keyword">&gt;</span>
                      <span class="sn-keyword">&lt;</span>button className<span class="sn-keyword">=</span><span class="sn-string">"btn btn-default"</span><span class="sn-keyword">&gt;</span><span class="sn-keyword">&lt;</span>i className<span class="sn-keyword">=</span><span class="sn-string">"fa fa-search"</span><span class="sn-keyword">&gt;</span><span class="sn-keyword">&lt;</span>/i&gt;<span class="sn-keyword">&lt;</span>/button<span class="sn-keyword">&gt;</span>
                    <span class="sn-keyword">&lt;</span>/span<span class="sn-keyword">&gt;</span>
                  <span class="sn-keyword">&lt;</span>/div<span class="sn-keyword">&gt;</span>
                <span class="sn-keyword">&lt;</span>/div<span class="sn-keyword">&gt;</span>
            );

            <span class="sn-keyword">const</span> RefinementListLinks <span class="sn-keyword">=</span> connectRefinementList(({items, refine, createURL}) <span class="sn-keyword">=&gt;</span> {
              <span class="sn-keyword">const</span> itemComponents <span class="sn-keyword">=</span> items.map(item <span class="sn-keyword">=&gt;</span>
                <span class="sn-keyword">&lt;</span>div className<span class="sn-keyword">=</span>{item.isRefined ? <span class="sn-string">' active'</span> : <span class="sn-string">''</span>} key<span class="sn-keyword">=</span>{item.label}<span class="sn-keyword">&gt;</span>
                  <span class="sn-keyword">&lt;</span>a className<span class="sn-keyword">=</span><span class="sn-string">"item"</span> href<span class="sn-keyword">=</span>{createURL(item.<span class="sn-variable">value</span>)} <span class="sn-variable">onClick</span><span class="sn-keyword">=</span>{e <span class="sn-keyword">=&gt;</span> {
                    e.preventDefault();
                    refine(item.<span class="sn-variable">value</span>);
                  }}<span class="sn-keyword">&gt;</span>
                    <span class="sn-keyword">&lt;</span>span<span class="sn-keyword">&gt;</span> {item.label}<span class="sn-keyword">&lt;</span>/span<span class="sn-keyword">&gt;</span>
                    <span class="sn-keyword">&lt;</span>span className<span class="sn-keyword">=</span><span class="sn-string">"badge pull-right"</span><span class="sn-keyword">&gt;</span>{item.count}<span class="sn-keyword">&lt;</span>/span<span class="sn-keyword">&gt;</span>
                  <span class="sn-keyword">&lt;</span>/a<span class="sn-keyword">&gt;</span>
                <span class="sn-keyword">&lt;</span>/div<span class="sn-keyword">&gt;</span>
              );
            </code></pre>
      .inline.spacer80
      .inline.spacer40
      .inline.spacer40.hidden-sm

  section.row.fill-white.p-xlarge.m-l-none.m-r-none.pos-rel.section-framework
    .container
      .inline.spacer40
      .inline.spacer40.hidden-sm
      .col-md-12.z-10
        .col-md-6.p-r-xlarge
          img.section-illustration.phone_illustration(src="assets/img/react-mobile.svg", alt="Illustration Server size rendering")
          img.section-illustration.computer_illustration(src="assets/img/react-laptop.svg", alt="Illustration Server size rendering")

          ul.subtle-check-list
            li.pos-rel
              | react-native
              svg.inline.z-10
                use(xmlns:xlink='http://www.w3.org/1999/xlink', xlink:href='#check-icon')
            li.pos-rel
              | react-ui*
              svg.inline.z-10
                use(xmlns:xlink='http://www.w3.org/1999/xlink', xlink:href='#check-icon')
            li.pos-rel
              | react-router
              svg.inline.z-10
                use(xmlns:xlink='http://www.w3.org/1999/xlink', xlink:href='#check-icon')

        .col-md-6
          .spacer64
          header
            h3.no-p-t.m-t-none.text-thin React-community ready
          .spacer24
          p.color-logan.text-regular.text-normal Connectors provide a way to plug any existing code or React library to React InstantSearch and Algolia.

          .spacer24
          a.btn.btn-static-theme.b-n.elevation0(href="advanced/server-side-rendering.html", title="Get started with server-side rendering").
            Get started
            <svg> <use xlink:href="#arrow-right"></svg>
      .inline.spacer40
      .inline.spacer40.hidden-sm
      .inline.spacer120

  section.row.fill-titan.p-xlarge.m-l-none.m-r-none.pos-rel.section-live
    .col-md-12
      .spacer40
      header.text-center.m100p.p-large
        h3.no-p-t.m-t-none.text-thin See it live
      .container
        ul.flex-container.flex-dir-row.list-none.text-center
          li.flex-it-3.p-large
            .p-large.fill-white.elevation1.h300.flex-container.flex-dir-col.flex-align-center.radius6
              a(href='examples/e-commerce')
                .tile-container
                  .inline.spacer32
                  figure
                    img.w100(src='images/e-commerce.svg')
                  .spacer16
                  h3.text-lg E-commerce
                  span.light-link See it live >
          li.flex-it-3.p-large
            .p-large.fill-white.elevation1.h300.flex-container.flex-dir-col.flex-align-center.radius6
              a(href='examples/e-commerce-infinite')
                .tile-container
                  .inline.spacer32
                  figure
                    img.w100(src='images/e-commerce-infinite.svg')
                  .spacer16
                  h3.text-lg E-commerce & Infinite Hits
                  span.light-link See it live >
          li.flex-it-3.p-large
            .p-large.fill-white.elevation1.h300.flex-container.flex-dir-col.flex-align-center.radius6
              a(href='examples/material-ui')
                .tile-container
                  .inline.spacer32
                  figure
                    img.w100(src='images/material.svg')
                  .spacer16
                  h3.text-lg Material UI
                  span.light-link See it live >
          li.flex-it-3.p-large
            .p-large.fill-white.elevation1.h300.flex-container.flex-dir-col.flex-align-center.radius6
              a(href='examples/media')
                .tile-container
                  .inline.spacer32
                  figure
                    img.w100(src='images/media.svg')
                  .spacer16
                  h3.text-lg Media
                  span.light-link See it live >
          li.flex-it-3.p-large
            .p-large.fill-white.elevation1.h300.flex-container.flex-dir-col.flex-align-center.radius6
              a(href='examples/tourism')
                .tile-container
                  .inline.spacer32
                  figure
                    img.w100(src='images/tourism.svg')
                  .spacer16
                  h3.text-lg Tourism
                  span.light-link See it live >
          li.flex-it-3.p-large
            .p-large.fill-white.elevation1.h300.flex-container.flex-dir-col.flex-align-center.radius6
              .tile-container
                .inline.spacer64
                .inline.spacer16
                figure
                  img.w100(src='images/more-icon.svg')
                .spacer16
                h3.text-lg More to come


        .inline.spacer32
        .inline.spacer40.hidden-sm

  section.row.fill-white.p-xlarge.discover-section.m-l-none.m-r-none.pos-rel
    .container
      .inline.spacer80
      .col-md-12.z-10.text-center.row
        header
          h3.no-p-t.m-t-none.text-thin Discover the<br/>InstantSearch family

        .spacer80
        .row.h100.logos-container
          .col-md-12
            //- .col-md-4.col-md-offset-4
            //-   .card.p-large.h100.fill-white.elevation1.radius6.text-left
            //-     a(href="#")
            //-       figure
            //-         img(src="assets/img/InstantSearch-Generic.svg", alt="Logo InstantSearch")
            //-         figcaption InstantSearch

          .spacer32.inline
          .col-md-12
            .col-md-6.pos-rel.p-b-large.col-md-offset-2
              div.heading.w100p.text-left
                small.color-logan InstantSearch for native
          .col-md-12.mobile-projects
            .col-md-4.col-md-offset-2
              .card.fill-white.elevation1.radius6.p-large.h100.text-left
                a(href="https://community.algolia.com/instantsearch-android/")
                  figure
                    img(src="assets/img/InstantSearch-Android.svg", alt="Logo InstantSearch Android")
                    figcaption InstantSearch for Android
            .col-md-4
              .card.fill-white.elevation1.radius6.p-large.h100.text-left
                a(href="https://community.algolia.com/instantsearch-ios/")
                  figure
                    img(src="assets/img/InstantSearch-iOS.svg", alt="Logo InstantSearch iOS")
                    figcaption InstantSearch for iOS

        .spacer40.inline
        .row.desktop-projects
          .col-md-10.p-b-large
            div.heading.w100p.text-left.m-l-large
              small.color-logan InstantSearch for web
          .col-md-12
            .col-md-4
              .card.fill-white.elevation1.radius6.p-large.h100.text-left
                a(href="https://community.algolia.com/instantsearch.js/v2")
                  figure
                    img(src="assets/img/InstantSearch-JavaScript.svg", alt="Logo InstantSearch Javascript")
                    figcaption InstantSearch for Javascript
            .col-md-4
              .card.fill-white.elevation1.radius6.p-large.h100.text-left
                a(href="https://community.algolia.com/instantsearch.js/react/")
                  figure
                    img(src="assets/img/InstantSearch-React.svg", alt="Logo InstantSearch React")
                    figcaption InstantSearch for React
            .col-md-4
              .card.fill-white.elevation1.radius6.p-large.h100.text-left
                a(href="https://community.algolia.com/instantsearch.js/react/")
                  figure
                    img(src="assets/img/InstantSearch-Vue.svg", alt="Logo InstantSearch Vue")
                    figcaption InstantSearch for Vue.js
          //- .col-md-4
          //-   .card.fill-white.elevation1.radius6.p-large.h100.text-left
          //-     a(href="#")
          //-       figure
          //-         img(src="assets/img/InstantSearch-Vue.svg", alt="Logo InstantSearch Vue")
          //-         figcaption InstantSearch for Vue

      .inline.spacer80
      .inline.spacer120
